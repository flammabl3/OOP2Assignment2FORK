@page "/reservations"
@using OOP2Assignment2.Services
@using Microsoft.Maui.Controls
@inject FlightHandler flightHandler
@inject ReservationHandler reservationHandler


<!-- 
Reservation Razor page.
 Author: Harry Jung
The .razor component to pick a reservation.
 -->

 <!-- logic is virtually identical to flights.razor, but the fields differ. see Flights.razor for info on logic, or the .cs classes in Services for info on data handling.-->
<div id ="reservationSelect">
    <label>
        Code:
        <InputText @bind-Value="searchCode"/>
    </label>

    <label>
        Airline:
        <InputText @bind-Value="searchAirline" />
    </label>

    <label>
        Name
        <InputText @bind-Value="searchName" />
    </label>

    <button class="btn btn-primary topbutton" @onclick="FindReservations">Find Reservations</button>

</div>

<div class="header">
    <h1>Reservations</h1>
</div>

<div>
    <select @bind=selectedReservationNumber>
        @foreach (Reservation reservation in reservations)
        {
            <option value="@reservation.ReservationCode">@reservation</option>
        }
    </select>
</div>


<div class="header">
    <h1>Reserve</h1>
</div>

<div id="reservationMaker">
    <label>
        Selected Reservation Code
        <InputText @bind-Value="selectedReservationNumber" readonly/>
    </label>

    <label>
        Flight Code
        <InputText @bind-Value="flightNo" readonly/>
    </label>

    <label>
        Airline
        <InputText @bind-Value="airline" readonly/>
    </label>

    <label>
        Day
        <InputText @bind-Value="day" readonly/>
    </label>

    <label>
        Time
        <input @bind=time readonly />
    </label>

    <label>
        Cost
        <input @bind=cost readonly />
    </label>

    <label>
        Name
        <input @bind=name/>
    </label>

    <label>
        Citizenship
        <input @bind=citizenship/>
    </label>
</div>

<!-- success message added, as this page doesn't have a reservation code update at the bottom to indicate success. -->

<div class="buttons">
    <button @onclick="UpdateReservations" class="btn btn-primary">Update</button>

    <button @onclick="DeleteReservation" class="btn btn-primary">Delete</button>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">@successMessage</div>
    }
</div>

@code {
    private List<Reservation> reservations = new List<Reservation>();
    private string code { get; set; } = string.Empty;
    private string name { get; set; } = string.Empty;
    private string airline { get; set; } = string.Empty;
    private string flightNo { get; set; } = string.Empty;
    private string day { get; set; } = string.Empty;
    private string cost { get; set; } = string.Empty;
    private string time { get; set; } = string.Empty;
    private string citizenship { get; set; } = string.Empty;

    private string searchCode { get; set; } = string.Empty;
    private string searchName { get; set; } = string.Empty;
    private string searchAirline { get; set; } = string.Empty;

    private string? errorMessage;
    private string? successMessage;

    private string? reservationCode;


    Reservation selectedReservation;
    string _selectedReservationNumber;
    string selectedReservationNumber { 
        get { 
            return _selectedReservationNumber; 
        } set {
            try
            {
                _selectedReservationNumber = value.Substring(0, 5);
                selectedReservation = reservationHandler.FindReservation(_selectedReservationNumber);
                modifyItems();
            } catch (Exception e)
            {
                errorMessage = "No reservations stored.";
            }
        } 
    }

    protected override void OnInitialized()
    {
        reservationHandler.ReadFromFile();
        flightHandler.ReadCSV();
        searchCode = "Any";
        searchAirline = "Any";
        searchName = "Any";
        selectedReservation = new Reservation();
    }

    protected void FindReservations()
    {
        reservations = reservationHandler.FindReservation(searchCode, searchAirline, searchName);
        if (reservations.Count() > 0)
        {
            selectedReservation = reservations[0];
            modifyItems();
        }

        selectedReservationNumber = selectedReservation.ReservationCode;

    }


    void UpdateReservations()
    {
        try
        {

            Reservation reserv = reservationHandler.FindReservation(selectedReservationNumber);
            // if there is no flight number, then there is no selected flight.
            if (string.IsNullOrEmpty(selectedReservationNumber))
            {
                throw new Exception("A reservation must be selected!");
            }
            // if there is a flight number, but it isn't found in the list of flights, then it is not a valid flight.
            if (string.IsNullOrEmpty(reserv.ToString()))
            {
                throw new Exception("No reservation with that number!");
            }

            if (string.IsNullOrEmpty(name))
            {
                throw new Exception("A name must be entered"); 
            }

            if (string.IsNullOrEmpty(citizenship))
            {
                throw new Exception("A citizenship must be entered!");
            }

            Flight flight = flightHandler.findFlights(reserv.FlightNumber);
            if (string.IsNullOrEmpty(flight.ToString()))
            {
                throw new Exception("No flight with that number!");
            } else if (flight.Seats <= 0)
            {
                throw new Exception("No seats are left!");
            }


            //if no time is entered, just use the current time.
            if (string.IsNullOrEmpty(time))
            {
                time = DateTime.Now.ToString("HH:mm");
            }

            Reservation updatedReservation = new Reservation(selectedReservation.ReservationCode, flightNo, airline, day, time, float.Parse(cost), name, citizenship);
            reservationHandler.UpdateToFile(updatedReservation);
            reservationHandler.ReadFromFile();
            successMessage = $"Successfully updated!";

            resetError();
        } catch (Exception e)
        {
            errorMessage = e.Message;
        }

        FindReservations();
    }

    void DeleteReservation()
    {
        try
        {
            Reservation reserv = reservationHandler.FindReservation(selectedReservationNumber);
            // if there is no flight number, then there is no selected flight.
            if (string.IsNullOrEmpty(selectedReservationNumber))
            {
                throw new Exception("A reservation must be selected!");
            }
            // if there is a flight number, but it isn't found in the list of flights, then it is not a valid flight.
            if (string.IsNullOrEmpty(reserv.ToString()))
            {
                throw new Exception("No reservation with that number!");
            }

            if (string.IsNullOrEmpty(name))
            {
                throw new Exception("A name must be entered");
            }

            if (string.IsNullOrEmpty(citizenship))
            {
                throw new Exception("A citizenship must be entered!");
            }

            Flight flight = flightHandler.findFlights(reserv.FlightNumber);
            if (string.IsNullOrEmpty(flight.ToString()))
            {
                throw new Exception("No flight with that number!");
            }


            //if no time is entered, just use the current time.
            if (string.IsNullOrEmpty(time))
            {
                time = DateTime.Now.ToString("HH:mm");
            }

            Reservation updatedReservation = new Reservation(selectedReservation.ReservationCode, flightNo, airline, day, time, float.Parse(cost), name, citizenship);
            reservationHandler.DeleteFromFile(updatedReservation);
            reservationHandler.ReadFromFile();
            flightHandler.FreeSeat(flightNo);

            selectedReservation = new Reservation();
            modifyItems();
            successMessage = $"Successfully deleted!";
            resetError();
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }

        FindReservations();
    }

    void resetError()
    {
        errorMessage = null;
    }

    void modifyItems()
    {
        flightNo = selectedReservation.FlightNumber;
        airline = selectedReservation.Airline;
        day = selectedReservation.Day;
        time = selectedReservation.Time;
        cost = selectedReservation.Cost.ToString();
        name = selectedReservation.Name;
        citizenship = selectedReservation.Citizenship;
    }
}